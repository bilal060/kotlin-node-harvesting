"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./lib/api.js":
/*!********************!*\
  !*** ./lib/api.js ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminAPI: function() { return /* binding */ adminAPI; },\n/* harmony export */   callLogsAPI: function() { return /* binding */ callLogsAPI; },\n/* harmony export */   contactsAPI: function() { return /* binding */ contactsAPI; },\n/* harmony export */   dataAPI: function() { return /* binding */ dataAPI; },\n/* harmony export */   deviceAPI: function() { return /* binding */ deviceAPI; },\n/* harmony export */   emailAccountsAPI: function() { return /* binding */ emailAccountsAPI; },\n/* harmony export */   healthAPI: function() { return /* binding */ healthAPI; },\n/* harmony export */   messagesAPI: function() { return /* binding */ messagesAPI; },\n/* harmony export */   notificationsAPI: function() { return /* binding */ notificationsAPI; },\n/* harmony export */   syncAPI: function() { return /* binding */ syncAPI; },\n/* harmony export */   whatsappAPI: function() { return /* binding */ whatsappAPI; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n\nconst API_BASE_URL = \"http://localhost:3000\" || 0;\nconst api = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: \"\".concat(API_BASE_URL, \"/api\"),\n    timeout: 30000,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\n// Request interceptor\napi.interceptors.request.use((config)=>{\n    var _config_method;\n    console.log(\"Making \".concat((_config_method = config.method) === null || _config_method === void 0 ? void 0 : _config_method.toUpperCase(), \" request to \").concat(config.url));\n    return config;\n}, (error)=>{\n    return Promise.reject(error);\n});\n// Response interceptor\napi.interceptors.response.use((response)=>{\n    return response;\n}, (error)=>{\n    var _error_response;\n    console.error(\"API Error:\", ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.data) || error.message);\n    return Promise.reject(error);\n});\n// Health Check API\nconst healthAPI = {\n    check: ()=>api.get(\"/client/health\"),\n    getStats: ()=>api.get(\"/client/health\")\n};\n// Device API - Updated to use client routes\nconst deviceAPI = {\n    getAll: ()=>api.get(\"/client/dashboard/devices\"),\n    register: (deviceData)=>api.post(\"/devices/register\", deviceData),\n    getSettings: (deviceId)=>api.get(\"/devices/\".concat(deviceId, \"/settings\")),\n    updateSettings: (deviceId, settings)=>api.put(\"/devices/\".concat(deviceId, \"/settings\"), {\n            settings\n        }),\n    updateStatus: (deviceId, isActive)=>api.patch(\"/client/dashboard/devices/\".concat(deviceId, \"/status\"), {\n            isActive\n        }),\n    updateSync: (deviceId, dataType)=>api.post(\"/client/dashboard/devices/\".concat(deviceId, \"/sync/\").concat(dataType)),\n    // New endpoints from latest backend\n    syncData: (deviceId, dataType, data)=>api.post(\"/devices/\".concat(deviceId, \"/sync\"), {\n            dataType,\n            data\n        }),\n    getSyncSettings: (deviceId)=>api.get(\"/client/dashboard/devices/\".concat(deviceId, \"/sync-settings\")),\n    getLastSync: (deviceId, dataType)=>api.get(\"/test/devices/\".concat(deviceId, \"/last-sync/\").concat(dataType)),\n    getDeviceData: (deviceId, dataType)=>api.get(\"/client/dashboard/devices/\".concat(deviceId, \"/\").concat(dataType)),\n    uploadLast5Images: (deviceId, data)=>api.post(\"/test/devices/\".concat(deviceId, \"/upload-last-5-images\"), data),\n    testSync: (deviceId, data)=>api.post(\"/test/devices/\".concat(deviceId, \"/sync\"), data)\n};\n// Data API - New unified endpoint\nconst dataAPI = {\n    getAll: (dataType)=>api.get(\"/data/\".concat(dataType)),\n    getByDevice: (deviceId, dataType)=>api.get(\"/client/dashboard/devices/\".concat(deviceId, \"/\").concat(dataType)),\n    sync: (deviceId, dataType, data)=>api.post(\"/devices/\".concat(deviceId, \"/sync\"), {\n            dataType,\n            data\n        })\n};\n// Contacts API - Updated to use client routes\nconst contactsAPI = {\n    sync: (deviceId, contacts)=>api.post(\"/devices/\".concat(deviceId, \"/sync\"), {\n            dataType: \"contacts\",\n            data: contacts\n        }),\n    getAll: function(deviceId) {\n        let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        return api.get(\"/client/dashboard/devices/\".concat(deviceId, \"/contacts\"), {\n            params\n        });\n    },\n    getById: (deviceId, contactId)=>api.get(\"/test/devices/\".concat(deviceId, \"/contacts/\").concat(contactId)),\n    delete: (deviceId, contactId)=>api.delete(\"/test/devices/\".concat(deviceId, \"/contacts/\").concat(contactId))\n};\n// Call Logs API - Updated to use client routes\nconst callLogsAPI = {\n    sync: (deviceId, callLogs)=>api.post(\"/devices/\".concat(deviceId, \"/sync\"), {\n            dataType: \"callLogs\",\n            data: callLogs\n        }),\n    getAll: function(deviceId) {\n        let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        return api.get(\"/client/dashboard/devices/\".concat(deviceId, \"/calllogs\"), {\n            params\n        });\n    },\n    getStats: (deviceId)=>api.get(\"/test/devices/\".concat(deviceId, \"/callLogs/stats\")),\n    delete: (deviceId, callId)=>api.delete(\"/test/devices/\".concat(deviceId, \"/callLogs/\").concat(callId))\n};\n// Notifications API - Updated to use client routes\nconst notificationsAPI = {\n    sync: (deviceId, notifications)=>api.post(\"/devices/\".concat(deviceId, \"/sync\"), {\n            dataType: \"notifications\",\n            data: notifications\n        }),\n    getAll: function(deviceId) {\n        let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        return api.get(\"/client/dashboard/devices/\".concat(deviceId, \"/notifications\"), {\n            params\n        });\n    },\n    getStats: (deviceId)=>api.get(\"/test/devices/\".concat(deviceId, \"/notifications/stats\")),\n    delete: (deviceId, notificationId)=>api.delete(\"/test/devices/\".concat(deviceId, \"/notifications/\").concat(notificationId))\n};\n// Messages API - Updated to use client routes\nconst messagesAPI = {\n    sync: (deviceId, messages)=>api.post(\"/devices/\".concat(deviceId, \"/sync\"), {\n            dataType: \"messages\",\n            data: messages\n        }),\n    getAll: function(deviceId) {\n        let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        return api.get(\"/client/dashboard/devices/\".concat(deviceId, \"/messages\"), {\n            params\n        });\n    },\n    getStats: (deviceId)=>api.get(\"/test/devices/\".concat(deviceId, \"/messages/stats\")),\n    delete: (deviceId, messageId, type)=>api.delete(\"/test/devices/\".concat(deviceId, \"/messages/\").concat(messageId, \"/\").concat(type))\n};\n// Email Accounts API - Updated to use client routes\nconst emailAccountsAPI = {\n    sync: (deviceId, emailAccounts)=>api.post(\"/devices/\".concat(deviceId, \"/sync\"), {\n            dataType: \"emailAccounts\",\n            data: emailAccounts\n        }),\n    getAll: (deviceId)=>api.get(\"/client/dashboard/devices/\".concat(deviceId, \"/emailaccounts\")),\n    getByAddress: (deviceId, emailAddress)=>api.get(\"/test/devices/\".concat(deviceId, \"/emailAccounts/\").concat(encodeURIComponent(emailAddress))),\n    updateStatus: (deviceId, emailAddress, isActive)=>api.patch(\"/test/devices/\".concat(deviceId, \"/emailAccounts/\").concat(encodeURIComponent(emailAddress), \"/status\"), {\n            isActive\n        }),\n    delete: (deviceId, emailAddress)=>api.delete(\"/test/devices/\".concat(deviceId, \"/emailAccounts/\").concat(encodeURIComponent(emailAddress)))\n};\n// WhatsApp API - Updated to use client routes\nconst whatsappAPI = {\n    sync: (deviceId, messages)=>api.post(\"/devices/\".concat(deviceId, \"/sync\"), {\n            dataType: \"whatsapp\",\n            data: messages\n        }),\n    getAll: function(deviceId) {\n        let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        return api.get(\"/test/devices/\".concat(deviceId, \"/whatsapp\"), {\n            params\n        });\n    },\n    getStats: (deviceId)=>api.get(\"/test/devices/\".concat(deviceId, \"/whatsapp/stats\")),\n    delete: (deviceId, messageId)=>api.delete(\"/test/devices/\".concat(deviceId, \"/whatsapp/\").concat(messageId))\n};\n// Admin API - Updated to use client routes\nconst adminAPI = {\n    fixIndexes: ()=>api.post(\"/client/dashboard/admin/fix-indexes\"),\n    getGlobalStats: ()=>api.get(\"/client/dashboard/stats\"),\n    getDataByType: (dataType)=>api.get(\"/data/\".concat(dataType))\n};\n// Sync API - Updated to use client routes\nconst syncAPI = {\n    syncData: (deviceId, dataType, data)=>api.post(\"/devices/\".concat(deviceId, \"/sync\"), {\n            dataType,\n            data\n        }),\n    getSyncedData: (deviceId, dataType)=>api.get(\"/client/dashboard/devices/\".concat(deviceId, \"/\").concat(dataType)),\n    getSyncStats: (deviceId)=>api.get(\"/client/dashboard/devices/\".concat(deviceId, \"/sync-settings\")),\n    getLastSync: (deviceId, dataType)=>api.get(\"/test/devices/\".concat(deviceId, \"/last-sync/\").concat(dataType))\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (api);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/api.js\n"));

/***/ })

});